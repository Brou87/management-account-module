/*
 * This file is generated by jOOQ.
 */
package io.surati.gap.maccount.module.domain.db.jooq.generated.tables;


import io.surati.gap.maccount.module.domain.db.jooq.generated.Keys;
import io.surati.gap.maccount.module.domain.db.jooq.generated.Public;
import io.surati.gap.maccount.module.domain.db.jooq.generated.tables.records.MaSubBundleRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MaSubBundle extends TableImpl<MaSubBundleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.ma_sub_bundle</code>
     */
    public static final MaSubBundle MA_SUB_BUNDLE = new MaSubBundle();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MaSubBundleRecord> getRecordType() {
        return MaSubBundleRecord.class;
    }

    /**
     * The column <code>public.ma_sub_bundle.id</code>.
     */
    public final TableField<MaSubBundleRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.ma_sub_bundle.no</code>.
     */
    public final TableField<MaSubBundleRecord, Long> NO = createField(DSL.name("no"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.ma_sub_bundle.creation_date</code>.
     */
    public final TableField<MaSubBundleRecord, LocalDateTime> CREATION_DATE = createField(DSL.name("creation_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.ma_sub_bundle.author_id</code>.
     */
    public final TableField<MaSubBundleRecord, Long> AUTHOR_ID = createField(DSL.name("author_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.ma_sub_bundle.title_id</code>.
     */
    public final TableField<MaSubBundleRecord, Long> TITLE_ID = createField(DSL.name("title_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.ma_sub_bundle.section_id</code>.
     */
    public final TableField<MaSubBundleRecord, Long> SECTION_ID = createField(DSL.name("section_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.ma_sub_bundle.bundle_id</code>.
     */
    public final TableField<MaSubBundleRecord, Long> BUNDLE_ID = createField(DSL.name("bundle_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private MaSubBundle(Name alias, Table<MaSubBundleRecord> aliased) {
        this(alias, aliased, null);
    }

    private MaSubBundle(Name alias, Table<MaSubBundleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.ma_sub_bundle</code> table reference
     */
    public MaSubBundle(String alias) {
        this(DSL.name(alias), MA_SUB_BUNDLE);
    }

    /**
     * Create an aliased <code>public.ma_sub_bundle</code> table reference
     */
    public MaSubBundle(Name alias) {
        this(alias, MA_SUB_BUNDLE);
    }

    /**
     * Create a <code>public.ma_sub_bundle</code> table reference
     */
    public MaSubBundle() {
        this(DSL.name("ma_sub_bundle"), null);
    }

    public <O extends Record> MaSubBundle(Table<O> child, ForeignKey<O, MaSubBundleRecord> key) {
        super(child, key, MA_SUB_BUNDLE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<MaSubBundleRecord, Long> getIdentity() {
        return (Identity<MaSubBundleRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<MaSubBundleRecord> getPrimaryKey() {
        return Keys.MA_SUB_BUNDLE_PKEY;
    }

    @Override
    public List<UniqueKey<MaSubBundleRecord>> getKeys() {
        return Arrays.<UniqueKey<MaSubBundleRecord>>asList(Keys.MA_SUB_BUNDLE_PKEY);
    }

    @Override
    public List<ForeignKey<MaSubBundleRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MaSubBundleRecord, ?>>asList(Keys.MA_SUB_BUNDLE__MA_SUB_BUNDLE_TITLE_ID_FKEY, Keys.MA_SUB_BUNDLE__MA_SUB_BUNDLE_SECTION_ID_FKEY, Keys.MA_SUB_BUNDLE__MA_SUB_BUNDLE_BUNDLE_ID_FKEY);
    }

    private transient MaTitle _maTitle;
    private transient MaSection _maSection;
    private transient MaBundle _maBundle;

    public MaTitle maTitle() {
        if (_maTitle == null)
            _maTitle = new MaTitle(this, Keys.MA_SUB_BUNDLE__MA_SUB_BUNDLE_TITLE_ID_FKEY);

        return _maTitle;
    }

    public MaSection maSection() {
        if (_maSection == null)
            _maSection = new MaSection(this, Keys.MA_SUB_BUNDLE__MA_SUB_BUNDLE_SECTION_ID_FKEY);

        return _maSection;
    }

    public MaBundle maBundle() {
        if (_maBundle == null)
            _maBundle = new MaBundle(this, Keys.MA_SUB_BUNDLE__MA_SUB_BUNDLE_BUNDLE_ID_FKEY);

        return _maBundle;
    }

    @Override
    public MaSubBundle as(String alias) {
        return new MaSubBundle(DSL.name(alias), this);
    }

    @Override
    public MaSubBundle as(Name alias) {
        return new MaSubBundle(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MaSubBundle rename(String name) {
        return new MaSubBundle(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MaSubBundle rename(Name name) {
        return new MaSubBundle(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, Long, LocalDateTime, Long, Long, Long, Long> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
